services:
  core:
    build:
      dockerfile: Dockerfile
    env_file:
      - .env.docker
    ports:
      - "8001:8001"
    depends_on:
      - redis
      - postgres
    volumes:
      - .:/app


    command: >
      sh -c "
        uvicorn app.main:app --host \${UVICORN_HOST} --port \${UVICORN_PORT}
      "
  
  

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - "5050:80"
    env_file:
      - .env.docker
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin



  # Elasticsearch service
  #  elasticsearch:
  #    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
  #    container_name: elasticsearch
  #    ports:
  #      - "9200:9200"
  #      - "9300:9300"
  #    volumes:
  #      - elasticsearch_data:/usr/share/elasticsearch/data
  #    healthcheck:
  #      test: [ "CMD-SHELL", "curl -s http://localhost:9200 | grep -q 'You Know, for Search'" ]
  #      interval: 30s
  #      retries: 3
  #
  #  # Kibana service for monitoring Elasticsearch data
  #  kibana:
  #    image: docker.elastic.co/kibana/kibana:7.17.3
  #    container_name: kibana
  #    ports:
  #      - "5601:5601"
  #    depends_on:
  #      - elasticsearch
  #    environment:
  #      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  # Redis service
  redis:
    image: redis:7.0  # Use Redis 7.x or later
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data


  # postgres service (postgresSql)
  postgres:
    image: postgres:14
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env.docker
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dev_user -h postgres -p 5432" ]
      interval: 10s
      retries: 5
      start_period: 10s




  logto:
    build:
      context: logto
      dockerfile: Dockerfile
    depends_on:
      logto_postgres:
        condition: service_healthy
    ports:
      - "3001:3001"
      - "3002:3002"
    environment:
      - TRUST_PROXY_HEADER=1
      - DB_URL=postgres://logto:logto@logto_postgres:5432/logto
      - ADMIN_USER=admin  # Set your admin email
      - ADMIN_PASSWORD=SuperSecurePassword123  # Set your admin password
      # Mandatory for GitPod to map host env to the container, thus GitPod can dynamically configure the public URL of Logto;
      # Or, you can leverage it for local testing.
      - ENDPOINT
      - ADMIN_ENDPOINT
#    entrypoint: ["sh", "-c", "/wait-for-it.sh logto_postgres:5432 -- pnpm run alteration:deploy && pnpm -r prepack && pnpm start"]

  logto_postgres:
    image: postgres:17-alpine
    user: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: logto
      POSTGRES_PASSWORD: logto
      POSTGRES_DB: logto
    volumes:
      - logto_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U logto -h logto_postgres -p 5432" ]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  #    elasticsearch_data:
  redis_data:
  pgadmin_data:
  postgres_data:
  logto_postgres_data: